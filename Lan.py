from telebot import types
import json
import os

from pathlib import Path

from telebot import TeleBot

from Localization.localization_loader import load_locales_from_folder, load_localization_file

# –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –µ–≥–æ
from config import bot
Alex_id = 1346718456
# ========================== –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ —è–∑—ã–∫–æ–≤ (—Å —Ñ–ª–∞–≥–∞–º–∏) ==========================
language_display_names = {
    "—Ä—É—Å—Å–∫–∏–π": "üá∑üá∫–†—É—Å—Å–∫–∏–π",
    "—É–∑–±–µ–∫—Å–∫–∏–π": "uzO'zbekcha"
    #"–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "üá¨üáßEnglish",
    #"—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "üá∫üá¶–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
}

# ========================== –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ JSON ==========================

class LocalizedString:
    def __init__(self, key: str, format_queue=None):
        self.key = key
        self.__format_queue = format_queue or []

    def __str__(self):
        return self.localize()

    def localize(self, code: str = "ru"):
        string = translator.get_string(self.key, code)
        if string is None:
            string = self.key
        for fmt in self.__format_queue:
            string = fmt(string)
        return string

    def format(self, *args, **kwargs):
        def fmt(s): return s.format(*args, **kwargs)
        copy = LocalizedString(self.key, self.__format_queue.copy())
        copy.__format_queue.append(fmt)
        return copy


class Translator:
    def __init__(self, default_locale="ru"):
        self.locales = {}

    def load_locale(self, code, *paths):
        self.locales.setdefault(code, {})
        for p in paths:
            try:
                self.locales[code].update(load_localization_file(p))
            except Exception as e:
                print(f"[Translator] Failed to load {p}: {e}")

    def get_string(self, key, code):
        return self.locales.get(code, {}).get(key)


def auto_load_locales(translator, base_dir="Localization"):
    base = Path(base_dir)
    files = list(base.glob("*.*")) + list(base.rglob("*.*"))  # –¥–æ–±–∞–≤–ª—è–µ–º –∏ –∫–æ—Ä–µ–Ω—å, –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ

    seen = set()
    language_buckets = {}

    for file in files:
        if file.suffix.lower() not in [".yaml", ".yml", ".json"]:
            continue

        if file in seen:
            continue
        seen.add(file)

        name_without_ext = file.stem  # –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        lang_code = name_without_ext.split("_")[-1].lower()  # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ "_"

        language_buckets.setdefault(lang_code, []).append(str(file))

    for lang_code, paths in language_buckets.items():
        translator.load_locale(lang_code, *paths)



# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫—É
translator = Translator()
auto_load_locales(translator, base_dir="Localization")


user_language_preferences = {}
chat_language_preferences = {}


def lt(target_id: int, key: str, force_lang: str = None) -> str:
    if force_lang:
        code = force_lang
    else:
        lang = (chat_language_preferences.get(target_id, "—É–∑–±–µ–∫—Å–∫–∏–π")
                if target_id < 0 else
                user_language_preferences.get(target_id, "—É–∑–±–µ–∫—Å–∫–∏–π"))
        code = {"—Ä—É—Å—Å–∫–∏–π": "ru", "—É–∑–±–µ–∫—Å–∫–∏–π": "uz"}.get(lang, "ru")
    return LocalizedString(key).localize(code)


def localized_language_name(lang_key: str) -> str:
    return language_display_names.get(lang_key, language_display_names["—Ä—É—Å—Å–∫–∏–π"])

# ========================== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ==========================


def is_user_admin(chat_id, user_id):
    if user_id == Alex_id:
        return True
    try:
        return bot.get_chat_member(chat_id, user_id).status in ("administrator", "creator")
    except:
        return False

# ========================== /admin_locale ==========================

@bot.message_handler(commands=["admin_locale"])
def admin_set_language(message):
    user_id = message.from_user.id

    if message.chat.type == "private":
        bot.reply_to(message, lt(user_id, "only_in_groups"))
        return

    chat_id = message.chat.id
    if not is_user_admin(chat_id, user_id):
        bot.reply_to(message, lt(user_id, "only_admin"))
        return

    current = chat_language_preferences.get(chat_id, "—Ä—É—Å—Å–∫–∏–π")

    # –°—Ç—Ä–æ–∏–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–ª–∞–≥–∞–º–∏
    kb = types.InlineKeyboardMarkup()
    for key in ["—Ä—É—Å—Å–∫–∏–π", "—É–∑–±–µ–∫—Å–∫–∏–π"]:
        kb.add(types.InlineKeyboardButton(
            text=localized_language_name(key),
            callback_data=f"adminset_{key}"
        ))

    # –¢–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏–∑—É–µ–º –ø–æ —á–∞—Ç—É
    bot.reply_to(
        message,
        lt(chat_id, "current_group_language")
           .format(lang=localized_language_name(current)),
        reply_markup=kb
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("adminset_"))
def handle_admin_language_buttons(call):

    chat_id = call.message.chat.id
    user_id  = call.from_user.id
    username = call.from_user.username or ""

    if not is_user_admin(chat_id, user_id):
        bot.answer_callback_query(call.id, lt(user_id, "only_admin"))
        return

    selected = call.data.split("_", 1)[1].lower()
    chat_language_preferences[chat_id] = selected

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —á–∞—Ç—É
    bot.answer_callback_query(
        call.id,
        lt(chat_id, "group_language_set")
           .format(lang=localized_language_name(selected))
    )
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=lt(chat_id, "current_group_language_set").format(lang=localized_language_name(selected))
    )

    if selected == "—É–∑–±–µ–∫—Å–∫–∏–π":
        bot.send_message(chat_id, lt(chat_id, "uz_gratitude"))


# ========================== /set_l ==========================


@bot.message_handler(commands=["set_l"])
def set_language(message):
    if message.chat.type != "private":
        bot.reply_to(message, lt(message.chat.id, "private_only_language_change"))
        return

    user_id = message.from_user.id
    current = user_language_preferences.get(user_id, "—Ä—É—Å—Å–∫–∏–π")

    kb = types.InlineKeyboardMarkup()
    for key in ["—Ä—É—Å—Å–∫–∏–π", "—É–∑–±–µ–∫—Å–∫–∏–π"]:
        kb.add(types.InlineKeyboardButton(
            text=localized_language_name(key),
            callback_data=key
        ))

    bot.send_message(
        user_id,
        lt(user_id, "current_user_language").format(lang=localized_language_name(current)),
        reply_markup=kb
    )
    
@bot.callback_query_handler(func=lambda call: call.data in ["—Ä—É—Å—Å–∫–∏–π", "—É–∑–±–µ–∫—Å–∫–∏–π"])
def handle_user_language_buttons(call):
    user_id = call.from_user.id
    selected = call.data.lower()
    user_language_preferences[user_id] = selected

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    bot.answer_callback_query(
        call.id,
        lt(user_id, "language_set").format(lang=localized_language_name(selected))
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=lt(user_id, "current_language_set").format(lang=localized_language_name(selected))
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–∑–±–µ–∫—Å–∫–æ–≥–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if selected == "—É–∑–±–µ–∫—Å–∫–∏–π":
        bot.send_message(user_id, lt(user_id, "uz_gratitude"))

